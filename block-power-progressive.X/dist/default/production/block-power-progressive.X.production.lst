

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed May 18 15:53:59 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F2320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    15                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F2320 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	idataCOMRAM
    54  0001D6                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _count_bloq_cycles
    58  0001D6  0001               	dw	1
    59  0000                     _ADRESL	set	4035
    60  0000                     _ADRESH	set	4036
    61  0000                     _PIR1bits	set	3998
    62  0000                     _RCONbits	set	4048
    63  0000                     _TMR0L	set	4054
    64  0000                     _TMR0H	set	4055
    65  0000                     _T0CON	set	4053
    66  0000                     _IPR1bits	set	3999
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _PORTC	set	3970
    69  0000                     _PORTA	set	3968
    70  0000                     _LATCbits	set	3979
    71  0000                     _TRISAbits	set	3986
    72  0000                     _TRISC	set	3988
    73  0000                     _PIE1bits	set	3997
    74  0000                     _ADCON2	set	4032
    75  0000                     _ADCON1	set	4033
    76  0000                     _ADCON0	set	4034
    77  0000                     _INTCONbits	set	4082
    78  0000                     _INTCON2bits	set	4081
    79                           
    80                           ; #config settings
    81                           
    82                           	psect	cinit
    83  0001A4                     __pcinit:
    84                           	callstack 0
    85  0001A4                     start_initialization:
    86                           	callstack 0
    87  0001A4                     __initialization:
    88                           	callstack 0
    89                           
    90                           ; Initialize objects allocated to COMRAM (2 bytes)
    91                           ; load TBLPTR registers with __pidataCOMRAM
    92  0001A4  0ED6               	movlw	low __pidataCOMRAM
    93  0001A6  6EF6               	movwf	tblptrl,c
    94  0001A8  0E01               	movlw	high __pidataCOMRAM
    95  0001AA  6EF7               	movwf	tblptrh,c
    96  0001AC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    97  0001AE  6EF8               	movwf	tblptru,c
    98  0001B0  0009               	tblrd		*+	;fetch initializer
    99  0001B2  CFF5 F00E          	movff	tablat,__pdataCOMRAM
   100  0001B6  0009               	tblrd		*+	;fetch initializer
   101  0001B8  CFF5 F00F          	movff	tablat,__pdataCOMRAM+1
   102                           
   103                           ; Clear objects allocated to COMRAM (9 bytes)
   104  0001BC  EE00  F001         	lfsr	0,__pbssCOMRAM
   105  0001C0  0E09               	movlw	9
   106  0001C2                     clear_0:
   107  0001C2  6AEE               	clrf	postinc0,c
   108  0001C4  06E8               	decf	wreg,f,c
   109  0001C6  E1FD               	bnz	clear_0
   110  0001C8                     end_of_initialization:
   111                           	callstack 0
   112  0001C8                     __end_of__initialization:
   113                           	callstack 0
   114  0001C8  9010               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   115  0001CA  9210               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   116  0001CC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   117  0001CE  6EF8               	movwf	tblptru,c
   118  0001D0  0100               	movlb	0
   119  0001D2  EF93  F000         	goto	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMRAM
   122  000001                     __pbssCOMRAM:
   123                           	callstack 0
   124  000001                     _timer_bloq:
   125                           	callstack 0
   126  000001                     	ds	2
   127  000003                     _count_timer:
   128                           	callstack 0
   129  000003                     	ds	2
   130  000005                     _convert_ad:
   131                           	callstack 0
   132  000005                     	ds	2
   133  000007                     _STATE:
   134                           	callstack 0
   135  000007                     	ds	1
   136  000008                     _bloq_timer:
   137                           	callstack 0
   138  000008                     	ds	1
   139  000009                     _flag:
   140                           	callstack 0
   141  000009                     	ds	1
   142                           
   143                           	psect	dataCOMRAM
   144  00000E                     __pdataCOMRAM:
   145                           	callstack 0
   146  00000E                     _count_bloq_cycles:
   147                           	callstack 0
   148  00000E                     	ds	2
   149                           
   150                           	psect	cstackCOMRAM
   151  00000A                     __pcstackCOMRAM:
   152                           	callstack 0
   153  00000A                     my_isr@time_low:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x0
   157  00000A                     	ds	2
   158  00000C                     ??_main:
   159                           
   160                           ; 1 bytes @ 0x2
   161  00000C                     	ds	2
   162                           
   163 ;;
   164 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   165 ;;
   166 ;; *************** function _main *****************
   167 ;; Defined at:
   168 ;;		line 87 in file "main.c"
   169 ;; Parameters:    Size  Location     Type
   170 ;;		None
   171 ;; Auto vars:     Size  Location     Type
   172 ;;		None
   173 ;; Return value:  Size  Location     Type
   174 ;;                  1    wreg      void 
   175 ;; Registers used:
   176 ;;		wreg, status,2, status,0
   177 ;; Tracked objects:
   178 ;;		On entry : 0/0
   179 ;;		On exit  : 0/0
   180 ;;		Unchanged: 0/0
   181 ;; Data sizes:     COMRAM   BANK0   BANK1
   182 ;;      Params:         0       0       0
   183 ;;      Locals:         0       0       0
   184 ;;      Temps:          2       0       0
   185 ;;      Totals:         2       0       0
   186 ;;Total ram usage:        2 bytes
   187 ;; Hardware stack levels required when called: 1
   188 ;; This function calls:
   189 ;;		Nothing
   190 ;; This function is called by:
   191 ;;		Startup code after reset
   192 ;; This function uses a non-reentrant model
   193 ;;
   194                           
   195                           	psect	text0
   196  000126                     __ptext0:
   197                           	callstack 0
   198  000126                     _main:
   199                           	callstack 30
   200  000126                     
   201                           ;main.c: 89:     PORTA = 0x00;
   202  000126  0E00               	movlw	0
   203  000128  6E80               	movwf	128,c	;volatile
   204                           
   205                           ;main.c: 90:     PORTC = 0x00;
   206  00012A  0E00               	movlw	0
   207  00012C  6E82               	movwf	130,c	;volatile
   208                           
   209                           ;main.c: 91:     TRISC = 0x00;
   210  00012E  0E00               	movlw	0
   211  000130  6E94               	movwf	148,c	;volatile
   212  000132                     
   213                           ;main.c: 92:     TRISAbits.RA0 = 1;
   214  000132  8092               	bsf	146,0,c	;volatile
   215  000134                     
   216                           ;main.c: 95:     INTCONbits.GIE = 1;
   217  000134  8EF2               	bsf	242,7,c	;volatile
   218  000136                     
   219                           ;main.c: 96:     INTCONbits.PEIE = 1;
   220  000136  8CF2               	bsf	242,6,c	;volatile
   221                           
   222                           ;main.c: 97:     ADCON0 = 0b00000001;
   223  000138  0E01               	movlw	1
   224  00013A  6EC2               	movwf	194,c	;volatile
   225                           
   226                           ;main.c: 98:     ADCON1 = 0b00001110;
   227  00013C  0E0E               	movlw	14
   228  00013E  6EC1               	movwf	193,c	;volatile
   229                           
   230                           ;main.c: 99:     ADCON2 = 0b10001101;
   231  000140  0E8D               	movlw	141
   232  000142  6EC0               	movwf	192,c	;volatile
   233  000144                     
   234                           ;main.c: 100:     PIE1bits.ADIE = 1;
   235  000144  8C9D               	bsf	157,6,c	;volatile
   236  000146                     
   237                           ;main.c: 101:     IPR1bits.ADIP = 1;
   238  000146  8C9F               	bsf	159,6,c	;volatile
   239                           
   240                           ;main.c: 105:     T0CON = 0b10010111;
   241  000148  0E97               	movlw	151
   242  00014A  6ED5               	movwf	213,c	;volatile
   243  00014C                     
   244                           ;main.c: 108:     INTCONbits.TMR0IE = 1;
   245  00014C  8AF2               	bsf	242,5,c	;volatile
   246  00014E                     
   247                           ;main.c: 109:     INTCONbits.TMR0IF = 1;
   248  00014E  84F2               	bsf	242,2,c	;volatile
   249  000150                     
   250                           ;main.c: 110:     PIE1bits.RCIE = 0;
   251  000150  9A9D               	bcf	157,5,c	;volatile
   252  000152                     
   253                           ;main.c: 111:     TMR0H = 0xFF;
   254  000152  68D7               	setf	215,c	;volatile
   255                           
   256                           ;main.c: 112:     TMR0L = 0xB1;
   257  000154  0EB1               	movlw	177
   258  000156  6ED6               	movwf	214,c	;volatile
   259  000158                     
   260                           ;main.c: 113:     INTCON2bits.TMR0IP =1;
   261  000158  84F1               	bsf	241,2,c	;volatile
   262  00015A                     
   263                           ;main.c: 114:     RCONbits.IPEN = 1;
   264  00015A  8ED0               	bsf	208,7,c	;volatile
   265  00015C                     
   266                           ;main.c: 115:     ADCON0bits.GO = 1;
   267  00015C  82C2               	bsf	194,1,c	;volatile
   268  00015E  EFB7  F000         	goto	l786
   269  000162                     l61:
   270                           
   271                           ;main.c: 119:                 LATCbits.LATC7 =0;
   272  000162  9E8B               	bcf	139,7,c	;volatile
   273                           
   274                           ;main.c: 120:                 break;
   275  000164  EFB7  F000         	goto	l786
   276  000168                     l64:
   277                           
   278                           ;main.c: 125:                 LATCbits.LATC7 =1;
   279  000168  8E8B               	bsf	139,7,c	;volatile
   280                           
   281                           ;main.c: 126:                 break;
   282  00016A  EFB7  F000         	goto	l786
   283  00016E                     l60:
   284  00016E                     l786:
   285  00016E  5007               	movf	_STATE^0,w,c
   286  000170  6E0C               	movwf	??_main^0,c
   287  000172  6A0D               	clrf	(??_main+1)^0,c
   288                           
   289                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   290                           ; Switch size 1, requested type "simple"
   291                           ; Number of cases is 1, Range of values is 0 to 0
   292                           ; switch strategies available:
   293                           ; Name         Instructions Cycles
   294                           ; simple_byte            4     3 (average)
   295                           ;	Chosen strategy is simple_byte
   296  000174  500D               	movf	(??_main+1)^0,w,c
   297  000176  0A00               	xorlw	0	; case 0
   298  000178  B4D8               	btfsc	status,2,c
   299  00017A  EFC1  F000         	goto	l842
   300  00017E  EFB7  F000         	goto	l786
   301  000182                     l842:
   302                           
   303                           ; Switch size 1, requested type "simple"
   304                           ; Number of cases is 3, Range of values is 0 to 2
   305                           ; switch strategies available:
   306                           ; Name         Instructions Cycles
   307                           ; simple_byte           10     6 (average)
   308                           ;	Chosen strategy is simple_byte
   309  000182  500C               	movf	??_main^0,w,c
   310  000184  0A00               	xorlw	0	; case 0
   311  000186  B4D8               	btfsc	status,2,c
   312  000188  EFB1  F000         	goto	l61
   313  00018C  0A01               	xorlw	1	; case 1
   314  00018E  B4D8               	btfsc	status,2,c
   315  000190  EFB7  F000         	goto	l60
   316  000194  0A03               	xorlw	3	; case 2
   317  000196  B4D8               	btfsc	status,2,c
   318  000198  EFB4  F000         	goto	l64
   319  00019C  EFB7  F000         	goto	l786
   320  0001A0  EF91  F000         	goto	start
   321  0001A4                     __end_of_main:
   322                           	callstack 0
   323                           
   324 ;; *************** function _my_isr *****************
   325 ;; Defined at:
   326 ;;		line 134 in file "main.c"
   327 ;; Parameters:    Size  Location     Type
   328 ;;		None
   329 ;; Auto vars:     Size  Location     Type
   330 ;;  time_low        2    0[COMRAM] unsigned short 
   331 ;; Return value:  Size  Location     Type
   332 ;;                  1    wreg      void 
   333 ;; Registers used:
   334 ;;		wreg, status,2, status,0
   335 ;; Tracked objects:
   336 ;;		On entry : 0/0
   337 ;;		On exit  : 0/0
   338 ;;		Unchanged: 0/0
   339 ;; Data sizes:     COMRAM   BANK0   BANK1
   340 ;;      Params:         0       0       0
   341 ;;      Locals:         2       0       0
   342 ;;      Temps:          0       0       0
   343 ;;      Totals:         2       0       0
   344 ;;Total ram usage:        2 bytes
   345 ;; Hardware stack levels used: 1
   346 ;; This function calls:
   347 ;;		Nothing
   348 ;; This function is called by:
   349 ;;		Interrupt level 2
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           	psect	intcode
   354  000008                     __pintcode:
   355                           	callstack 0
   356  000008                     _my_isr:
   357                           	callstack 30
   358                           
   359                           ;incstack = 0
   360  000008  8210               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   361  00000A                     
   362                           ;main.c: 137:      if (INTCONbits.TMR0IF == 1){
   363  00000A  A4F2               	btfss	242,2,c	;volatile
   364  00000C  EF0A  F000         	goto	i2u1_41
   365  000010  EF0C  F000         	goto	i2u1_40
   366  000014                     i2u1_41:
   367  000014  EF5C  F000         	goto	i2l820
   368  000018                     i2u1_40:
   369  000018                     
   370                           ;main.c: 139:          if(STATE == BLOQUEIO_ANDAMENTO)
   371  000018  0407               	decf	_STATE^0,w,c
   372  00001A  A4D8               	btfss	status,2,c
   373  00001C  EF12  F000         	goto	i2u2_41
   374  000020  EF14  F000         	goto	i2u2_40
   375  000024                     i2u2_41:
   376  000024  EF56  F000         	goto	i2l812
   377  000028                     i2u2_40:
   378  000028                     
   379                           ;main.c: 140:         {;main.c: 141:             time_low = 400 - (count_bloq_cycles);
   380  000028  500E               	movf	_count_bloq_cycles^0,w,c
   381  00002A  0890               	sublw	144
   382  00002C  6E0A               	movwf	my_isr@time_low^0,c
   383  00002E  500F               	movf	(_count_bloq_cycles+1)^0,w,c
   384  000030  A0D8               	btfss	status,0,c
   385  000032  2AE8               	incf	wreg,f,c
   386  000034  0801               	sublw	1
   387  000036  6E0B               	movwf	(my_isr@time_low+1)^0,c
   388                           
   389                           ;main.c: 142:             if(count_timer >= time_low){
   390  000038  500A               	movf	my_isr@time_low^0,w,c
   391  00003A  5C03               	subwf	_count_timer^0,w,c
   392  00003C  500B               	movf	(my_isr@time_low+1)^0,w,c
   393  00003E  5804               	subwfb	(_count_timer+1)^0,w,c
   394  000040  A0D8               	btfss	status,0,c
   395  000042  EF25  F000         	goto	i2u3_41
   396  000046  EF27  F000         	goto	i2u3_40
   397  00004A                     i2u3_41:
   398  00004A  EF56  F000         	goto	i2l812
   399  00004E                     i2u3_40:
   400  00004E                     
   401                           ;main.c: 143:                 if(count_timer<400){
   402  00004E  0E90               	movlw	144
   403  000050  5C03               	subwf	_count_timer^0,w,c
   404  000052  0E01               	movlw	1
   405  000054  5804               	subwfb	(_count_timer+1)^0,w,c
   406  000056  B0D8               	btfsc	status,0,c
   407  000058  EF30  F000         	goto	i2u4_41
   408  00005C  EF32  F000         	goto	i2u4_40
   409  000060                     i2u4_41:
   410  000060  EF35  F000         	goto	i2l75
   411  000064                     i2u4_40:
   412  000064                     
   413                           ;main.c: 144:                     LATCbits.LATC7 = 1;
   414  000064  8E8B               	bsf	139,7,c	;volatile
   415                           
   416                           ;main.c: 145:                 }else{
   417  000066  EF56  F000         	goto	i2l812
   418  00006A                     i2l75:
   419                           
   420                           ;main.c: 146:                     LATCbits.LATC7 = 0;
   421  00006A  9E8B               	bcf	139,7,c	;volatile
   422  00006C                     
   423                           ;main.c: 147:                     count_timer = 0;
   424  00006C  0E00               	movlw	0
   425  00006E  6E04               	movwf	(_count_timer+1)^0,c
   426  000070  0E00               	movlw	0
   427  000072  6E03               	movwf	_count_timer^0,c
   428  000074                     
   429                           ;main.c: 148:                     count_bloq_cycles=count_bloq_cycles*2;
   430  000074  90D8               	bcf	status,0,c
   431  000076  340E               	rlcf	_count_bloq_cycles^0,w,c
   432  000078  6E0E               	movwf	_count_bloq_cycles^0,c
   433  00007A  340F               	rlcf	(_count_bloq_cycles+1)^0,w,c
   434  00007C  6E0F               	movwf	(_count_bloq_cycles+1)^0,c
   435  00007E                     
   436                           ;main.c: 149:                     if (count_bloq_cycles >=400){
   437  00007E  0E90               	movlw	144
   438  000080  5C0E               	subwf	_count_bloq_cycles^0,w,c
   439  000082  0E01               	movlw	1
   440  000084  580F               	subwfb	(_count_bloq_cycles+1)^0,w,c
   441  000086  A0D8               	btfss	status,0,c
   442  000088  EF48  F000         	goto	i2u5_41
   443  00008C  EF4A  F000         	goto	i2u5_40
   444  000090                     i2u5_41:
   445  000090  EF56  F000         	goto	i2l74
   446  000094                     i2u5_40:
   447  000094                     
   448                           ;main.c: 150:                         STATE = BLOQUEADO;
   449  000094  0E02               	movlw	2
   450  000096  6E07               	movwf	_STATE^0,c
   451                           
   452                           ;main.c: 151:                         count_bloq_cycles =1;
   453  000098  0E00               	movlw	0
   454  00009A  6E0F               	movwf	(_count_bloq_cycles+1)^0,c
   455  00009C  0E01               	movlw	1
   456  00009E  6E0E               	movwf	_count_bloq_cycles^0,c
   457                           
   458                           ;main.c: 152:                         count_timer = 0;
   459  0000A0  0E00               	movlw	0
   460  0000A2  6E04               	movwf	(_count_timer+1)^0,c
   461  0000A4  0E00               	movlw	0
   462  0000A6  6E03               	movwf	_count_timer^0,c
   463  0000A8  EF56  F000         	goto	i2l812
   464  0000AC                     i2l74:
   465  0000AC                     i2l812:
   466                           
   467                           ;main.c: 157:         count_timer++;
   468  0000AC  4A03               	infsnz	_count_timer^0,f,c
   469  0000AE  2A04               	incf	(_count_timer+1)^0,f,c
   470  0000B0                     
   471                           ;main.c: 158:         TMR0H = 0xFF;
   472  0000B0  68D7               	setf	215,c	;volatile
   473  0000B2                     
   474                           ;main.c: 159:         TMR0L = 0xB1;
   475  0000B2  0EB1               	movlw	177
   476  0000B4  6ED6               	movwf	214,c	;volatile
   477  0000B6                     
   478                           ;main.c: 160:         INTCONbits.TMR0IF = 0;
   479  0000B6  94F2               	bcf	242,2,c	;volatile
   480  0000B8                     i2l820:
   481                           
   482                           ;main.c: 163:      if (PIR1bits.ADIF == 1){
   483  0000B8  AC9E               	btfss	158,6,c	;volatile
   484  0000BA  EF61  F000         	goto	i2u6_41
   485  0000BE  EF63  F000         	goto	i2u6_40
   486  0000C2                     i2u6_41:
   487  0000C2  EF8F  F000         	goto	i2l82
   488  0000C6                     i2u6_40:
   489  0000C6                     
   490                           ;main.c: 164:          convert_ad = (uint16_t) ADRESH<<8;
   491  0000C6  50C4               	movf	196,w,c	;volatile
   492  0000C8  6E06               	movwf	(_convert_ad+1)^0,c
   493  0000CA  6A05               	clrf	_convert_ad^0,c
   494  0000CC                     
   495                           ;main.c: 165:          convert_ad = convert_ad + ADRESL;
   496  0000CC  50C3               	movf	195,w,c	;volatile
   497  0000CE  2405               	addwf	_convert_ad^0,w,c
   498  0000D0  6E05               	movwf	_convert_ad^0,c
   499  0000D2  0E00               	movlw	0
   500  0000D4  2006               	addwfc	(_convert_ad+1)^0,w,c
   501  0000D6  6E06               	movwf	(_convert_ad+1)^0,c
   502  0000D8                     
   503                           ;main.c: 167:          if(convert_ad > 0x0067){
   504  0000D8  5006               	movf	(_convert_ad+1)^0,w,c
   505  0000DA  E109               	bnz	i2u7_40
   506  0000DC  0E68               	movlw	104
   507  0000DE  5C05               	subwf	_convert_ad^0,w,c
   508  0000E0  A0D8               	btfss	status,0,c
   509  0000E2  EF75  F000         	goto	i2u7_41
   510  0000E6  EF77  F000         	goto	i2u7_40
   511  0000EA                     i2u7_41:
   512  0000EA  EF8B  F000         	goto	i2l832
   513  0000EE                     i2u7_40:
   514  0000EE                     
   515                           ;main.c: 168:              if(STATE == DESBLOQUEADO){
   516  0000EE  5007               	movf	_STATE^0,w,c
   517  0000F0  A4D8               	btfss	status,2,c
   518  0000F2  EF7D  F000         	goto	i2u8_41
   519  0000F6  EF7F  F000         	goto	i2u8_40
   520  0000FA                     i2u8_41:
   521  0000FA  EF8D  F000         	goto	i2l834
   522  0000FE                     i2u8_40:
   523  0000FE                     
   524                           ;main.c: 169:                  STATE = BLOQUEIO_ANDAMENTO;
   525  0000FE  0E01               	movlw	1
   526  000100  6E07               	movwf	_STATE^0,c
   527                           
   528                           ;main.c: 170:                  count_timer=0;
   529  000102  0E00               	movlw	0
   530  000104  6E04               	movwf	(_count_timer+1)^0,c
   531  000106  0E00               	movlw	0
   532  000108  6E03               	movwf	_count_timer^0,c
   533                           
   534                           ;main.c: 171:                  count_bloq_cycles = 1;
   535  00010A  0E00               	movlw	0
   536  00010C  6E0F               	movwf	(_count_bloq_cycles+1)^0,c
   537  00010E  0E01               	movlw	1
   538  000110  6E0E               	movwf	_count_bloq_cycles^0,c
   539  000112  EF8D  F000         	goto	i2l834
   540  000116                     i2l832:
   541                           
   542                           ;main.c: 174:              STATE = DESBLOQUEADO;
   543  000116  0E00               	movlw	0
   544  000118  6E07               	movwf	_STATE^0,c
   545  00011A                     i2l834:
   546                           
   547                           ;main.c: 177:           PIR1bits.ADIF = 0;
   548  00011A  9C9E               	bcf	158,6,c	;volatile
   549  00011C                     
   550                           ;main.c: 178:           ADCON0bits.GO = 1;
   551  00011C  82C2               	bsf	194,1,c	;volatile
   552  00011E                     i2l82:
   553  00011E  9210               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   554  000120  0011               	retfie		f
   555  000122                     __end_of_my_isr:
   556                           	callstack 0
   557  0000                     
   558                           	psect	rparam
   559  0000                     
   560                           	psect	temp
   561  000010                     btemp:
   562                           	callstack 0
   563  000010                     	ds	1
   564  0000                     int$flags	set	btemp
   565  0000                     wtemp8	set	btemp+1
   566  0000                     ttemp5	set	btemp+1
   567  0000                     ttemp6	set	btemp+4
   568  0000                     ttemp7	set	btemp+8
   569                           
   570                           	psect	idloc
   571                           
   572                           ;Config register IDLOC0 @ 0x200000
   573                           ;	unspecified, using default values
   574  200000                     	org	2097152
   575  200000  FF                 	db	255
   576                           
   577                           ;Config register IDLOC1 @ 0x200001
   578                           ;	unspecified, using default values
   579  200001                     	org	2097153
   580  200001  FF                 	db	255
   581                           
   582                           ;Config register IDLOC2 @ 0x200002
   583                           ;	unspecified, using default values
   584  200002                     	org	2097154
   585  200002  FF                 	db	255
   586                           
   587                           ;Config register IDLOC3 @ 0x200003
   588                           ;	unspecified, using default values
   589  200003                     	org	2097155
   590  200003  FF                 	db	255
   591                           
   592                           ;Config register IDLOC4 @ 0x200004
   593                           ;	unspecified, using default values
   594  200004                     	org	2097156
   595  200004  FF                 	db	255
   596                           
   597                           ;Config register IDLOC5 @ 0x200005
   598                           ;	unspecified, using default values
   599  200005                     	org	2097157
   600  200005  FF                 	db	255
   601                           
   602                           ;Config register IDLOC6 @ 0x200006
   603                           ;	unspecified, using default values
   604  200006                     	org	2097158
   605  200006  FF                 	db	255
   606                           
   607                           ;Config register IDLOC7 @ 0x200007
   608                           ;	unspecified, using default values
   609  200007                     	org	2097159
   610  200007  FF                 	db	255
   611                           
   612                           	psect	config
   613                           
   614                           ; Padding undefined space
   615  300000                     	org	3145728
   616  300000  FF                 	db	255
   617                           
   618                           ;Config register CONFIG1H @ 0x300001
   619                           ;	Oscillator Selection bits
   620                           ;	OSC = HS, HS Oscillator
   621                           ;	Fail-Safe Clock Monitor Enable bit
   622                           ;	FSCM = ON, Fail-Safe Clock Monitor enabled
   623                           ;	Internal/External Switchover bit
   624                           ;	IESO = ON, Internal/External Switchover mode enabled
   625  300001                     	org	3145729
   626  300001  C2                 	db	194
   627                           
   628                           ;Config register CONFIG2L @ 0x300002
   629                           ;	Power-up Timer enable bit
   630                           ;	PWRT = OFF, PWRT disabled
   631                           ;	Brown-out Reset enable bit
   632                           ;	BOR = ON, Brown-out Reset enabled
   633                           ;	Brown-out Reset Voltage bits
   634                           ;	BORV = 20, VBOR set to 2.0V
   635  300002                     	org	3145730
   636  300002  0F                 	db	15
   637                           
   638                           ;Config register CONFIG2H @ 0x300003
   639                           ;	Watchdog Timer Enable bit
   640                           ;	WDT = ON, WDT enabled
   641                           ;	Watchdog Timer Postscale Select bits
   642                           ;	WDTPS = 32768, 1:32768
   643  300003                     	org	3145731
   644  300003  1F                 	db	31
   645                           
   646                           ; Padding undefined space
   647  300004                     	org	3145732
   648  300004  FF                 	db	255
   649                           
   650                           ;Config register CONFIG3H @ 0x300005
   651                           ;	CCP2 MUX bit
   652                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   653                           ;	PORTB A/D Enable bit
   654                           ;	PBAD = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
   655                           ;	MCLR Pin Enable bit
   656                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   657  300005                     	org	3145733
   658  300005  83                 	db	131
   659                           
   660                           ;Config register CONFIG4L @ 0x300006
   661                           ;	Stack Full/Underflow Reset Enable bit
   662                           ;	STVR = ON, Stack full/underflow will cause Reset
   663                           ;	Single-Supply ICSP Enable bit
   664                           ;	LVP = ON, Single-Supply ICSP enabled
   665                           ;	Background Debugger Enable bit
   666                           ;	DEBUG = 0x1, unprogrammed default
   667  300006                     	org	3145734
   668  300006  85                 	db	133
   669                           
   670                           ; Padding undefined space
   671  300007                     	org	3145735
   672  300007  FF                 	db	255
   673                           
   674                           ;Config register CONFIG5L @ 0x300008
   675                           ;	Code Protection bit
   676                           ;	CP0 = OFF, Block 0 (000200-0007FFh) not code-protected
   677                           ;	Code Protection bit
   678                           ;	CP1 = OFF, Block 1 (000800-000FFFh) not code-protected
   679                           ;	Code Protection bit
   680                           ;	CP2 = OFF, Block 2 (001000-0017FFh) not code-protected
   681                           ;	Code Protection bit
   682                           ;	CP3 = OFF, Block 3 (001800-001FFFh) not code-protected
   683  300008                     	org	3145736
   684  300008  0F                 	db	15
   685                           
   686                           ;Config register CONFIG5H @ 0x300009
   687                           ;	Boot Block Code Protection bit
   688                           ;	CPB = OFF, Boot block (000000-0001FFh) is not code-protected
   689                           ;	Data EEPROM Code Protection bit
   690                           ;	CPD = OFF, Data EEPROM is not code-protected
   691  300009                     	org	3145737
   692  300009  C0                 	db	192
   693                           
   694                           ;Config register CONFIG6L @ 0x30000A
   695                           ;	Write Protection bit
   696                           ;	WRT0 = OFF, Block 0 (000200-0007FFh) not write-protected
   697                           ;	Write Protection bit
   698                           ;	WRT1 = OFF, Block 1 (000800-000FFFh) not write-protected
   699                           ;	Write Protection bit
   700                           ;	WRT2 = OFF, Block 2 (001000-0017FFh) not write-protected
   701                           ;	Write Protection bit
   702                           ;	WRT3 = OFF, Block 3 (001800-001FFFh) not write-protected
   703  30000A                     	org	3145738
   704  30000A  0F                 	db	15
   705                           
   706                           ;Config register CONFIG6H @ 0x30000B
   707                           ;	Configuration Register Write Protection bit
   708                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   709                           ;	Boot Block Write Protection bit
   710                           ;	WRTB = OFF, Boot block (000000-0001FFh) is not write-protected
   711                           ;	Data EEPROM Write Protection bit
   712                           ;	WRTD = OFF, Data EEPROM is not write-protected
   713  30000B                     	org	3145739
   714  30000B  E0                 	db	224
   715                           
   716                           ;Config register CONFIG7L @ 0x30000C
   717                           ;	Table Read Protection bit
   718                           ;	EBTR0 = OFF, Block 0 (000200-0007FFh) not protected from table reads executed in other
      +                           blocks
   719                           ;	Table Read Protection bit
   720                           ;	EBTR1 = OFF, Block 1 (000800-000FFFh) not protected from table reads executed in other
      +                           blocks
   721                           ;	Table Read Protection bit
   722                           ;	EBTR2 = OFF, Block 2 (001000-0017FFh) not protected from table reads executed in other
      +                           blocks
   723                           ;	Table Read Protection bit
   724                           ;	EBTR3 = OFF, Block 3 (001800-001FFFh) not protected from table reads executed in other
      +                           blocks
   725  30000C                     	org	3145740
   726  30000C  0F                 	db	15
   727                           
   728                           ;Config register CONFIG7H @ 0x30000D
   729                           ;	Boot Block Table Read Protection bit
   730                           ;	EBTRB = OFF, Boot block (000000-0001FFh) is not protected from table reads executed in
      +                           other blocks
   731  30000D                     	org	3145741
   732  30000D  40                 	db	64
   733                           tosu	equ	0xFFF
   734                           tosh	equ	0xFFE
   735                           tosl	equ	0xFFD
   736                           stkptr	equ	0xFFC
   737                           pclatu	equ	0xFFB
   738                           pclath	equ	0xFFA
   739                           pcl	equ	0xFF9
   740                           tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           prodh	equ	0xFF4
   745                           prodl	equ	0xFF3
   746                           indf0	equ	0xFEF
   747                           postinc0	equ	0xFEE
   748                           postdec0	equ	0xFED
   749                           preinc0	equ	0xFEC
   750                           plusw0	equ	0xFEB
   751                           fsr0h	equ	0xFEA
   752                           fsr0l	equ	0xFE9
   753                           wreg	equ	0xFE8
   754                           indf1	equ	0xFE7
   755                           postinc1	equ	0xFE6
   756                           postdec1	equ	0xFE5
   757                           preinc1	equ	0xFE4
   758                           plusw1	equ	0xFE3
   759                           fsr1h	equ	0xFE2
   760                           fsr1l	equ	0xFE1
   761                           bsr	equ	0xFE0
   762                           indf2	equ	0xFDF
   763                           postinc2	equ	0xFDE
   764                           postdec2	equ	0xFDD
   765                           preinc2	equ	0xFDC
   766                           plusw2	equ	0xFDB
   767                           fsr2h	equ	0xFDA
   768                           fsr2l	equ	0xFD9
   769                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126      4      15
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _my_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              2 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _my_isr                                               2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _my_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      19        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E      4       F       1       11.9%
BITBIGSFRhhllhh     20      0       0      12        0.0%
BITBIGSFRhhlhhh     19      0       0       9        0.0%
BITBIGSFRhhh         D      0       0       8        0.0%
BITBIGSFRhhlhll      B      0       0      11        0.0%
BITBIGSFRhhlll       8      0       0      13        0.0%
BITBIGSFRhlll        8      0       0      16        0.0%
BITBIGSFRhllh        6      0       0      15        0.0%
BITBIGSFRhhlhlh      4      0       0      10        0.0%
BITBIGSFRhlh         1      0       0      14        0.0%
BITBIGSFRl           1      0       0      17        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       F      18        0.0%
DATA                 0      0       F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed May 18 15:53:59 2022

                     l60 016E                       l61 0162                       l64 0168  
                    l760 0132                      l842 0182                      l770 014C  
                    l762 0134                      l780 015A                      l772 014E  
                    l764 0136                      l782 015C                      l774 0150  
                    l766 0144                      l758 0126                      l776 0152  
                    l768 0146                      l786 016E                      l778 0158  
                    wreg 000FE8                     i2l82 011E                     i2l74 00AC  
                   i2l75 006A                     _flag 0009                     _main 0126  
                   btemp 0010                     start 0122             ___param_bank 000000  
                  ?_main 000A                    _T0CON 000FD5                    i2l800 004E  
                  i2l810 0094                    i2l802 0064                    i2l804 006C  
                  i2l812 00AC                    i2l820 00B8                    i2l830 00FE  
                  i2l822 00C6                    i2l814 00B0                    i2l806 0074  
                  i2l832 0116                    i2l824 00CC                    i2l816 00B2  
                  i2l808 007E                    i2l834 011A                    i2l826 00D8  
                  i2l818 00B6                    i2l836 011C                    i2l828 00EE  
                  i2l792 000A                    i2l794 000A                    i2l796 0018  
                  i2l798 0028                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _PORTA 000F80                    _PORTC 000F82                    _STATE 0007  
                  _TRISC 000F94                    tablat 000FF5                    ttemp5 0011  
                  ttemp6 0014                    ttemp7 0018                    status 000FD8  
                  wtemp8 0011          __initialization 01A4             __end_of_main 01A4  
                 ??_main 000C            __activetblptr 000002                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   i2u1_40 0018                   i2u1_41 0014  
                 i2u2_40 0028                   i2u2_41 0024                   i2u3_40 004E  
                 i2u3_41 004A                   i2u4_40 0064                   i2u4_41 0060  
                 i2u5_40 0094                   i2u5_41 0090                   i2u6_40 00C6  
                 i2u6_41 00C2                   i2u7_40 00EE                   i2u7_41 00EA  
                 i2u8_40 00FE                   i2u8_41 00FA                   clear_0 01C2  
                 _my_isr 0008                   isa$std 000001             __pdataCOMRAM 000E  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization 01C8            ___rparam_used 000001  
         __pcstackCOMRAM 000A                  ?_my_isr 000A               _bloq_timer 0008  
      _count_bloq_cycles 000E               _convert_ad 0005                  __Hparam 0000  
                __Lparam 0000                  __pcinit 01A4                  __ramtop 0200  
                __ptext0 0126     end_of_initialization 01C8            __Lmediumconst 0000  
                postinc0 000FEE               _timer_bloq 0001                _TRISAbits 000F92  
         my_isr@time_low 000A            __pidataCOMRAM 01D6           __end_of_my_isr 0122  
    start_initialization 01A4                 ??_my_isr 000A              __pbssCOMRAM 0001  
              __pintcode 0008                 _LATCbits 000F8B                 _IPR1bits 000F9F  
               _PIE1bits 000F9D                 _PIR1bits 000F9E                 _RCONbits 000FD0  
             _ADCON0bits 000FC2              _INTCON2bits 000FF1              _count_timer 0003  
               __Hrparam 0000                 __Lrparam 0000                 isa$xinst 000000  
               int$flags 0010               _INTCONbits 000FF2                 intlevel2 0000  
