

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed May 18 19:34:06 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F2320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    15                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F2320 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	idataCOMRAM
    54  000200                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _count_bloq_cycles
    58  000200  0001               	dw	1
    59  0000                     _ADRESL	set	4035
    60  0000                     _ADRESH	set	4036
    61  0000                     _PIR1bits	set	3998
    62  0000                     _RCONbits	set	4048
    63  0000                     _TMR0L	set	4054
    64  0000                     _TMR0H	set	4055
    65  0000                     _T0CON	set	4053
    66  0000                     _IPR1bits	set	3999
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _PORTC	set	3970
    69  0000                     _PORTA	set	3968
    70  0000                     _LATCbits	set	3979
    71  0000                     _TRISAbits	set	3986
    72  0000                     _TRISC	set	3988
    73  0000                     _PIE1bits	set	3997
    74  0000                     _ADCON2	set	4032
    75  0000                     _ADCON1	set	4033
    76  0000                     _ADCON0	set	4034
    77  0000                     _INTCONbits	set	4082
    78  0000                     _INTCON2bits	set	4081
    79                           
    80                           ; #config settings
    81                           
    82                           	psect	cinit
    83  0001CE                     __pcinit:
    84                           	callstack 0
    85  0001CE                     start_initialization:
    86                           	callstack 0
    87  0001CE                     __initialization:
    88                           	callstack 0
    89                           
    90                           ; Initialize objects allocated to COMRAM (2 bytes)
    91                           ; load TBLPTR registers with __pidataCOMRAM
    92  0001CE  0E00               	movlw	low __pidataCOMRAM
    93  0001D0  6EF6               	movwf	tblptrl,c
    94  0001D2  0E02               	movlw	high __pidataCOMRAM
    95  0001D4  6EF7               	movwf	tblptrh,c
    96  0001D6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    97  0001D8  6EF8               	movwf	tblptru,c
    98  0001DA  0009               	tblrd		*+	;fetch initializer
    99  0001DC  CFF5 F00B          	movff	tablat,__pdataCOMRAM
   100  0001E0  0009               	tblrd		*+	;fetch initializer
   101  0001E2  CFF5 F00C          	movff	tablat,__pdataCOMRAM+1
   102                           
   103                           ; Clear objects allocated to COMRAM (6 bytes)
   104  0001E6  6A06               	clrf	(__pbssCOMRAM+5)& (0+255),c
   105  0001E8  6A05               	clrf	(__pbssCOMRAM+4)& (0+255),c
   106  0001EA  6A04               	clrf	(__pbssCOMRAM+3)& (0+255),c
   107  0001EC  6A03               	clrf	(__pbssCOMRAM+2)& (0+255),c
   108  0001EE  6A02               	clrf	(__pbssCOMRAM+1)& (0+255),c
   109  0001F0  6A01               	clrf	__pbssCOMRAM& (0+255),c
   110  0001F2                     end_of_initialization:
   111                           	callstack 0
   112  0001F2                     __end_of__initialization:
   113                           	callstack 0
   114  0001F2  900D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   115  0001F4  920D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   116  0001F6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   117  0001F8  6EF8               	movwf	tblptru,c
   118  0001FA  0100               	movlb	0
   119  0001FC  EFA0  F000         	goto	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMRAM
   122  000001                     __pbssCOMRAM:
   123                           	callstack 0
   124  000001                     _count_timer:
   125                           	callstack 0
   126  000001                     	ds	2
   127  000003                     _convert_ad:
   128                           	callstack 0
   129  000003                     	ds	2
   130  000005                     _STATE:
   131                           	callstack 0
   132  000005                     	ds	1
   133  000006                     _flag:
   134                           	callstack 0
   135  000006                     	ds	1
   136                           
   137                           	psect	dataCOMRAM
   138  00000B                     __pdataCOMRAM:
   139                           	callstack 0
   140  00000B                     _count_bloq_cycles:
   141                           	callstack 0
   142  00000B                     	ds	2
   143                           
   144                           	psect	cstackCOMRAM
   145  000007                     __pcstackCOMRAM:
   146                           	callstack 0
   147  000007                     my_isr@time_low:
   148                           	callstack 0
   149                           
   150                           ; 2 bytes @ 0x0
   151  000007                     	ds	2
   152  000009                     ??_main:
   153                           
   154                           ; 1 bytes @ 0x2
   155  000009                     	ds	2
   156                           
   157 ;;
   158 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   159 ;;
   160 ;; *************** function _main *****************
   161 ;; Defined at:
   162 ;;		line 87 in file "main.c"
   163 ;; Parameters:    Size  Location     Type
   164 ;;		None
   165 ;; Auto vars:     Size  Location     Type
   166 ;;		None
   167 ;; Return value:  Size  Location     Type
   168 ;;                  1    wreg      void 
   169 ;; Registers used:
   170 ;;		wreg, status,2, status,0
   171 ;; Tracked objects:
   172 ;;		On entry : 0/0
   173 ;;		On exit  : 0/0
   174 ;;		Unchanged: 0/0
   175 ;; Data sizes:     COMRAM   BANK0   BANK1
   176 ;;      Params:         0       0       0
   177 ;;      Locals:         0       0       0
   178 ;;      Temps:          2       0       0
   179 ;;      Totals:         2       0       0
   180 ;;Total ram usage:        2 bytes
   181 ;; Hardware stack levels required when called: 1
   182 ;; This function calls:
   183 ;;		Nothing
   184 ;; This function is called by:
   185 ;;		Startup code after reset
   186 ;; This function uses a non-reentrant model
   187 ;;
   188                           
   189                           	psect	text0
   190  000140                     __ptext0:
   191                           	callstack 0
   192  000140                     _main:
   193                           	callstack 30
   194  000140                     
   195                           ;main.c: 89:     PORTA = 0x00;
   196  000140  0E00               	movlw	0
   197  000142  6E80               	movwf	128,c	;volatile
   198                           
   199                           ;main.c: 90:     PORTC = 0x00;
   200  000144  0E00               	movlw	0
   201  000146  6E82               	movwf	130,c	;volatile
   202                           
   203                           ;main.c: 91:     TRISC = 0x00;
   204  000148  0E00               	movlw	0
   205  00014A  6E94               	movwf	148,c	;volatile
   206  00014C                     
   207                           ;main.c: 92:     TRISAbits.RA0 = 1;
   208  00014C  8092               	bsf	146,0,c	;volatile
   209  00014E                     
   210                           ;main.c: 95:     INTCONbits.GIE = 1;
   211  00014E  8EF2               	bsf	242,7,c	;volatile
   212  000150                     
   213                           ;main.c: 96:     INTCONbits.PEIE = 1;
   214  000150  8CF2               	bsf	242,6,c	;volatile
   215                           
   216                           ;main.c: 97:     ADCON0 = 0b00000001;
   217  000152  0E01               	movlw	1
   218  000154  6EC2               	movwf	194,c	;volatile
   219                           
   220                           ;main.c: 98:     ADCON1 = 0b00001110;
   221  000156  0E0E               	movlw	14
   222  000158  6EC1               	movwf	193,c	;volatile
   223                           
   224                           ;main.c: 99:     ADCON2 = 0b10001101;
   225  00015A  0E8D               	movlw	141
   226  00015C  6EC0               	movwf	192,c	;volatile
   227  00015E                     
   228                           ;main.c: 100:     PIE1bits.ADIE = 1;
   229  00015E  8C9D               	bsf	157,6,c	;volatile
   230  000160                     
   231                           ;main.c: 101:     IPR1bits.ADIP = 1;
   232  000160  8C9F               	bsf	159,6,c	;volatile
   233                           
   234                           ;main.c: 105:     T0CON = 0b10010111;
   235  000162  0E97               	movlw	151
   236  000164  6ED5               	movwf	213,c	;volatile
   237  000166                     
   238                           ;main.c: 108:     INTCONbits.TMR0IE = 1;
   239  000166  8AF2               	bsf	242,5,c	;volatile
   240  000168                     
   241                           ;main.c: 109:     INTCONbits.TMR0IF = 1;
   242  000168  84F2               	bsf	242,2,c	;volatile
   243  00016A                     
   244                           ;main.c: 110:     PIE1bits.RCIE = 0;
   245  00016A  9A9D               	bcf	157,5,c	;volatile
   246  00016C                     
   247                           ;main.c: 111:     TMR0H = 0xFF;
   248  00016C  68D7               	setf	215,c	;volatile
   249                           
   250                           ;main.c: 112:     TMR0L = 0xB1;
   251  00016E  0EB1               	movlw	177
   252  000170  6ED6               	movwf	214,c	;volatile
   253  000172                     
   254                           ;main.c: 113:     INTCON2bits.TMR0IP =1;
   255  000172  84F1               	bsf	241,2,c	;volatile
   256  000174                     
   257                           ;main.c: 114:     RCONbits.IPEN = 1;
   258  000174  8ED0               	bsf	208,7,c	;volatile
   259  000176                     
   260                           ;main.c: 115:     ADCON0bits.GO = 1;
   261  000176  82C2               	bsf	194,1,c	;volatile
   262  000178                     
   263                           ;main.c: 116:     _delay((unsigned long)((500)*(8000000UL/4000000.0)));
   264  000178  0EC8               	movlw	200
   265  00017A                     u107:
   266  00017A  D000               	nop2	
   267  00017C  2EE8               	decfsz	wreg,f,c
   268  00017E  D7FD               	bra	u107
   269  000180  EFC8  F000         	goto	l789
   270  000184                     l61:
   271                           
   272                           ;main.c: 124:                 LATCbits.LATC7 =0;
   273  000184  9E8B               	bcf	139,7,c	;volatile
   274                           
   275                           ;main.c: 125:                 break;
   276  000186  EFC8  F000         	goto	l789
   277  00018A                     l63:
   278                           
   279                           ;main.c: 130:                 LATCbits.LATC7 =1;
   280  00018A  8E8B               	bsf	139,7,c	;volatile
   281                           
   282                           ;main.c: 131:                 break;
   283  00018C  EFC8  F000         	goto	l789
   284  000190                     l58:
   285  000190                     l789:
   286  000190  5005               	movf	_STATE^0,w,c
   287  000192  6E09               	movwf	??_main^0,c
   288  000194  6A0A               	clrf	(??_main+1)^0,c
   289                           
   290                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   291                           ; Switch size 1, requested type "simple"
   292                           ; Number of cases is 1, Range of values is 0 to 0
   293                           ; switch strategies available:
   294                           ; Name         Instructions Cycles
   295                           ; simple_byte            4     3 (average)
   296                           ;	Chosen strategy is simple_byte
   297  000196  500A               	movf	(??_main+1)^0,w,c
   298  000198  0A00               	xorlw	0	; case 0
   299  00019A  B4D8               	btfsc	status,2,c
   300  00019C  EFD2  F000         	goto	l849
   301  0001A0  EFC8  F000         	goto	l789
   302  0001A4                     l849:
   303                           
   304                           ; Switch size 1, requested type "simple"
   305                           ; Number of cases is 4, Range of values is 0 to 3
   306                           ; switch strategies available:
   307                           ; Name         Instructions Cycles
   308                           ; simple_byte           13     7 (average)
   309                           ;	Chosen strategy is simple_byte
   310  0001A4  5009               	movf	??_main^0,w,c
   311  0001A6  0A00               	xorlw	0	; case 0
   312  0001A8  B4D8               	btfsc	status,2,c
   313  0001AA  EFC8  F000         	goto	l58
   314  0001AE  0A01               	xorlw	1	; case 1
   315  0001B0  B4D8               	btfsc	status,2,c
   316  0001B2  EFC2  F000         	goto	l61
   317  0001B6  0A03               	xorlw	3	; case 2
   318  0001B8  B4D8               	btfsc	status,2,c
   319  0001BA  EFC8  F000         	goto	l58
   320  0001BE  0A01               	xorlw	1	; case 3
   321  0001C0  B4D8               	btfsc	status,2,c
   322  0001C2  EFC5  F000         	goto	l63
   323  0001C6  EFC8  F000         	goto	l789
   324  0001CA  EF9E  F000         	goto	start
   325  0001CE                     __end_of_main:
   326                           	callstack 0
   327                           
   328 ;; *************** function _my_isr *****************
   329 ;; Defined at:
   330 ;;		line 139 in file "main.c"
   331 ;; Parameters:    Size  Location     Type
   332 ;;		None
   333 ;; Auto vars:     Size  Location     Type
   334 ;;  time_low        2    0[COMRAM] unsigned short 
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg, status,2, status,0
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMRAM   BANK0   BANK1
   344 ;;      Params:         0       0       0
   345 ;;      Locals:         2       0       0
   346 ;;      Temps:          0       0       0
   347 ;;      Totals:         2       0       0
   348 ;;Total ram usage:        2 bytes
   349 ;; Hardware stack levels used: 1
   350 ;; This function calls:
   351 ;;		Nothing
   352 ;; This function is called by:
   353 ;;		Interrupt level 2
   354 ;; This function uses a non-reentrant model
   355 ;;
   356                           
   357                           	psect	intcode
   358  000008                     __pintcode:
   359                           	callstack 0
   360  000008                     _my_isr:
   361                           	callstack 30
   362                           
   363                           ;incstack = 0
   364  000008  820D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   365  00000A                     
   366                           ;main.c: 142:      if (INTCONbits.TMR0IF == 1){
   367  00000A  A4F2               	btfss	242,2,c	;volatile
   368  00000C  EF0A  F000         	goto	i2u1_41
   369  000010  EF0C  F000         	goto	i2u1_40
   370  000014                     i2u1_41:
   371  000014  EF5D  F000         	goto	i2l823
   372  000018                     i2u1_40:
   373  000018                     
   374                           ;main.c: 144:          if(STATE == BLOQUEIO_ANDAMENTO)
   375  000018  0E02               	movlw	2
   376  00001A  1805               	xorwf	_STATE^0,w,c
   377  00001C  A4D8               	btfss	status,2,c
   378  00001E  EF13  F000         	goto	i2u2_41
   379  000022  EF15  F000         	goto	i2u2_40
   380  000026                     i2u2_41:
   381  000026  EF57  F000         	goto	i2l815
   382  00002A                     i2u2_40:
   383  00002A                     
   384                           ;main.c: 145:         {;main.c: 146:             time_low = 400 - (count_bloq_cycles);
   385  00002A  500B               	movf	_count_bloq_cycles^0,w,c
   386  00002C  0890               	sublw	144
   387  00002E  6E07               	movwf	my_isr@time_low^0,c
   388  000030  500C               	movf	(_count_bloq_cycles+1)^0,w,c
   389  000032  A0D8               	btfss	status,0,c
   390  000034  2AE8               	incf	wreg,f,c
   391  000036  0801               	sublw	1
   392  000038  6E08               	movwf	(my_isr@time_low+1)^0,c
   393                           
   394                           ;main.c: 147:             if(count_timer >= time_low){
   395  00003A  5007               	movf	my_isr@time_low^0,w,c
   396  00003C  5C01               	subwf	_count_timer^0,w,c
   397  00003E  5008               	movf	(my_isr@time_low+1)^0,w,c
   398  000040  5802               	subwfb	(_count_timer+1)^0,w,c
   399  000042  A0D8               	btfss	status,0,c
   400  000044  EF26  F000         	goto	i2u3_41
   401  000048  EF28  F000         	goto	i2u3_40
   402  00004C                     i2u3_41:
   403  00004C  EF57  F000         	goto	i2l815
   404  000050                     i2u3_40:
   405  000050                     
   406                           ;main.c: 148:                 if(count_timer<400){
   407  000050  0E90               	movlw	144
   408  000052  5C01               	subwf	_count_timer^0,w,c
   409  000054  0E01               	movlw	1
   410  000056  5802               	subwfb	(_count_timer+1)^0,w,c
   411  000058  B0D8               	btfsc	status,0,c
   412  00005A  EF31  F000         	goto	i2u4_41
   413  00005E  EF33  F000         	goto	i2u4_40
   414  000062                     i2u4_41:
   415  000062  EF36  F000         	goto	i2l74
   416  000066                     i2u4_40:
   417  000066                     
   418                           ;main.c: 149:                     LATCbits.LATC7 = 1;
   419  000066  8E8B               	bsf	139,7,c	;volatile
   420                           
   421                           ;main.c: 150:                 }else{
   422  000068  EF57  F000         	goto	i2l815
   423  00006C                     i2l74:
   424                           
   425                           ;main.c: 151:                     LATCbits.LATC7 = 0;
   426  00006C  9E8B               	bcf	139,7,c	;volatile
   427  00006E                     
   428                           ;main.c: 152:                     count_timer = 0;
   429  00006E  0E00               	movlw	0
   430  000070  6E02               	movwf	(_count_timer+1)^0,c
   431  000072  0E00               	movlw	0
   432  000074  6E01               	movwf	_count_timer^0,c
   433  000076                     
   434                           ;main.c: 153:                     count_bloq_cycles=count_bloq_cycles*2;
   435  000076  90D8               	bcf	status,0,c
   436  000078  340B               	rlcf	_count_bloq_cycles^0,w,c
   437  00007A  6E0B               	movwf	_count_bloq_cycles^0,c
   438  00007C  340C               	rlcf	(_count_bloq_cycles+1)^0,w,c
   439  00007E  6E0C               	movwf	(_count_bloq_cycles+1)^0,c
   440  000080                     
   441                           ;main.c: 154:                     if (count_bloq_cycles >=400){
   442  000080  0E90               	movlw	144
   443  000082  5C0B               	subwf	_count_bloq_cycles^0,w,c
   444  000084  0E01               	movlw	1
   445  000086  580C               	subwfb	(_count_bloq_cycles+1)^0,w,c
   446  000088  A0D8               	btfss	status,0,c
   447  00008A  EF49  F000         	goto	i2u5_41
   448  00008E  EF4B  F000         	goto	i2u5_40
   449  000092                     i2u5_41:
   450  000092  EF57  F000         	goto	i2l73
   451  000096                     i2u5_40:
   452  000096                     
   453                           ;main.c: 155:                         STATE = BLOQUEADO;
   454  000096  0E03               	movlw	3
   455  000098  6E05               	movwf	_STATE^0,c
   456                           
   457                           ;main.c: 156:                         count_bloq_cycles =1;
   458  00009A  0E00               	movlw	0
   459  00009C  6E0C               	movwf	(_count_bloq_cycles+1)^0,c
   460  00009E  0E01               	movlw	1
   461  0000A0  6E0B               	movwf	_count_bloq_cycles^0,c
   462                           
   463                           ;main.c: 157:                         count_timer = 0;
   464  0000A2  0E00               	movlw	0
   465  0000A4  6E02               	movwf	(_count_timer+1)^0,c
   466  0000A6  0E00               	movlw	0
   467  0000A8  6E01               	movwf	_count_timer^0,c
   468  0000AA  EF57  F000         	goto	i2l815
   469  0000AE                     i2l73:
   470  0000AE                     i2l815:
   471                           
   472                           ;main.c: 162:         count_timer++;
   473  0000AE  4A01               	infsnz	_count_timer^0,f,c
   474  0000B0  2A02               	incf	(_count_timer+1)^0,f,c
   475  0000B2                     
   476                           ;main.c: 163:         TMR0H = 0xFF;
   477  0000B2  68D7               	setf	215,c	;volatile
   478  0000B4                     
   479                           ;main.c: 164:         TMR0L = 0xB1;
   480  0000B4  0EB1               	movlw	177
   481  0000B6  6ED6               	movwf	214,c	;volatile
   482  0000B8                     
   483                           ;main.c: 165:         INTCONbits.TMR0IF = 0;
   484  0000B8  94F2               	bcf	242,2,c	;volatile
   485  0000BA                     i2l823:
   486                           
   487                           ;main.c: 168:      if (PIR1bits.ADIF == 1){
   488  0000BA  AC9E               	btfss	158,6,c	;volatile
   489  0000BC  EF62  F000         	goto	i2u6_41
   490  0000C0  EF64  F000         	goto	i2u6_40
   491  0000C4                     i2u6_41:
   492  0000C4  EF9C  F000         	goto	i2l83
   493  0000C8                     i2u6_40:
   494  0000C8                     
   495                           ;main.c: 169:          convert_ad = (uint16_t) ADRESH<<8;
   496  0000C8  50C4               	movf	196,w,c	;volatile
   497  0000CA  6E04               	movwf	(_convert_ad+1)^0,c
   498  0000CC  6A03               	clrf	_convert_ad^0,c
   499  0000CE                     
   500                           ;main.c: 170:          convert_ad = convert_ad + ADRESL;
   501  0000CE  50C3               	movf	195,w,c	;volatile
   502  0000D0  2403               	addwf	_convert_ad^0,w,c
   503  0000D2  6E03               	movwf	_convert_ad^0,c
   504  0000D4  0E00               	movlw	0
   505  0000D6  2004               	addwfc	(_convert_ad+1)^0,w,c
   506  0000D8  6E04               	movwf	(_convert_ad+1)^0,c
   507  0000DA                     
   508                           ;main.c: 172:          if(convert_ad > 0x0067){
   509  0000DA  5004               	movf	(_convert_ad+1)^0,w,c
   510  0000DC  E109               	bnz	i2u7_40
   511  0000DE  0E68               	movlw	104
   512  0000E0  5C03               	subwf	_convert_ad^0,w,c
   513  0000E2  A0D8               	btfss	status,0,c
   514  0000E4  EF76  F000         	goto	i2u7_41
   515  0000E8  EF78  F000         	goto	i2u7_40
   516  0000EC                     i2u7_41:
   517  0000EC  EF98  F000         	goto	i2l839
   518  0000F0                     i2u7_40:
   519  0000F0                     
   520                           ;main.c: 173:             if(STATE == DESBLOQUEADO){
   521  0000F0  0405               	decf	_STATE^0,w,c
   522  0000F2  A4D8               	btfss	status,2,c
   523  0000F4  EF7E  F000         	goto	i2u8_41
   524  0000F8  EF80  F000         	goto	i2u8_40
   525  0000FC                     i2u8_41:
   526  0000FC  EF8C  F000         	goto	i2l835
   527  000100                     i2u8_40:
   528  000100                     
   529                           ;main.c: 174:                  STATE = BLOQUEIO_ANDAMENTO;
   530  000100  0E02               	movlw	2
   531  000102  6E05               	movwf	_STATE^0,c
   532                           
   533                           ;main.c: 175:                  count_timer=0;
   534  000104  0E00               	movlw	0
   535  000106  6E02               	movwf	(_count_timer+1)^0,c
   536  000108  0E00               	movlw	0
   537  00010A  6E01               	movwf	_count_timer^0,c
   538                           
   539                           ;main.c: 176:                  count_bloq_cycles = 1;
   540  00010C  0E00               	movlw	0
   541  00010E  6E0C               	movwf	(_count_bloq_cycles+1)^0,c
   542  000110  0E01               	movlw	1
   543  000112  6E0B               	movwf	_count_bloq_cycles^0,c
   544                           
   545                           ;main.c: 177:             }else if (STATE == INITIALIZER){
   546  000114  EF9A  F000         	goto	i2l841
   547  000118                     i2l835:
   548  000118  5005               	movf	_STATE^0,w,c
   549  00011A  A4D8               	btfss	status,2,c
   550  00011C  EF92  F000         	goto	i2u9_41
   551  000120  EF94  F000         	goto	i2u9_40
   552  000124                     i2u9_41:
   553  000124  EF9A  F000         	goto	i2l841
   554  000128                     i2u9_40:
   555  000128                     
   556                           ;main.c: 178:                 STATE = BLOQUEADO;
   557  000128  0E03               	movlw	3
   558  00012A  6E05               	movwf	_STATE^0,c
   559  00012C  EF9A  F000         	goto	i2l841
   560  000130                     i2l839:
   561                           
   562                           ;main.c: 181:                 STATE = DESBLOQUEADO;
   563  000130  0E01               	movlw	1
   564  000132  6E05               	movwf	_STATE^0,c
   565  000134                     i2l841:
   566                           
   567                           ;main.c: 184:           PIR1bits.ADIF = 0;
   568  000134  9C9E               	bcf	158,6,c	;volatile
   569  000136                     
   570                           ;main.c: 185:           ADCON0bits.GO = 1;
   571  000136  82C2               	bsf	194,1,c	;volatile
   572  000138                     i2l83:
   573  000138  920D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   574  00013A  0011               	retfie		f
   575  00013C                     __end_of_my_isr:
   576                           	callstack 0
   577  0000                     
   578                           	psect	rparam
   579  0000                     
   580                           	psect	temp
   581  00000D                     btemp:
   582                           	callstack 0
   583  00000D                     	ds	1
   584  0000                     int$flags	set	btemp
   585  0000                     wtemp8	set	btemp+1
   586  0000                     ttemp5	set	btemp+1
   587  0000                     ttemp6	set	btemp+4
   588  0000                     ttemp7	set	btemp+8
   589                           
   590                           	psect	idloc
   591                           
   592                           ;Config register IDLOC0 @ 0x200000
   593                           ;	unspecified, using default values
   594  200000                     	org	2097152
   595  200000  FF                 	db	255
   596                           
   597                           ;Config register IDLOC1 @ 0x200001
   598                           ;	unspecified, using default values
   599  200001                     	org	2097153
   600  200001  FF                 	db	255
   601                           
   602                           ;Config register IDLOC2 @ 0x200002
   603                           ;	unspecified, using default values
   604  200002                     	org	2097154
   605  200002  FF                 	db	255
   606                           
   607                           ;Config register IDLOC3 @ 0x200003
   608                           ;	unspecified, using default values
   609  200003                     	org	2097155
   610  200003  FF                 	db	255
   611                           
   612                           ;Config register IDLOC4 @ 0x200004
   613                           ;	unspecified, using default values
   614  200004                     	org	2097156
   615  200004  FF                 	db	255
   616                           
   617                           ;Config register IDLOC5 @ 0x200005
   618                           ;	unspecified, using default values
   619  200005                     	org	2097157
   620  200005  FF                 	db	255
   621                           
   622                           ;Config register IDLOC6 @ 0x200006
   623                           ;	unspecified, using default values
   624  200006                     	org	2097158
   625  200006  FF                 	db	255
   626                           
   627                           ;Config register IDLOC7 @ 0x200007
   628                           ;	unspecified, using default values
   629  200007                     	org	2097159
   630  200007  FF                 	db	255
   631                           
   632                           	psect	config
   633                           
   634                           ; Padding undefined space
   635  300000                     	org	3145728
   636  300000  FF                 	db	255
   637                           
   638                           ;Config register CONFIG1H @ 0x300001
   639                           ;	Oscillator Selection bits
   640                           ;	OSC = HS, HS Oscillator
   641                           ;	Fail-Safe Clock Monitor Enable bit
   642                           ;	FSCM = ON, Fail-Safe Clock Monitor enabled
   643                           ;	Internal/External Switchover bit
   644                           ;	IESO = ON, Internal/External Switchover mode enabled
   645  300001                     	org	3145729
   646  300001  C2                 	db	194
   647                           
   648                           ;Config register CONFIG2L @ 0x300002
   649                           ;	Power-up Timer enable bit
   650                           ;	PWRT = OFF, PWRT disabled
   651                           ;	Brown-out Reset enable bit
   652                           ;	BOR = ON, Brown-out Reset enabled
   653                           ;	Brown-out Reset Voltage bits
   654                           ;	BORV = 20, VBOR set to 2.0V
   655  300002                     	org	3145730
   656  300002  0F                 	db	15
   657                           
   658                           ;Config register CONFIG2H @ 0x300003
   659                           ;	Watchdog Timer Enable bit
   660                           ;	WDT = ON, WDT enabled
   661                           ;	Watchdog Timer Postscale Select bits
   662                           ;	WDTPS = 32768, 1:32768
   663  300003                     	org	3145731
   664  300003  1F                 	db	31
   665                           
   666                           ; Padding undefined space
   667  300004                     	org	3145732
   668  300004  FF                 	db	255
   669                           
   670                           ;Config register CONFIG3H @ 0x300005
   671                           ;	CCP2 MUX bit
   672                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   673                           ;	PORTB A/D Enable bit
   674                           ;	PBAD = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
   675                           ;	MCLR Pin Enable bit
   676                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   677  300005                     	org	3145733
   678  300005  83                 	db	131
   679                           
   680                           ;Config register CONFIG4L @ 0x300006
   681                           ;	Stack Full/Underflow Reset Enable bit
   682                           ;	STVR = ON, Stack full/underflow will cause Reset
   683                           ;	Single-Supply ICSP Enable bit
   684                           ;	LVP = ON, Single-Supply ICSP enabled
   685                           ;	Background Debugger Enable bit
   686                           ;	DEBUG = 0x1, unprogrammed default
   687  300006                     	org	3145734
   688  300006  85                 	db	133
   689                           
   690                           ; Padding undefined space
   691  300007                     	org	3145735
   692  300007  FF                 	db	255
   693                           
   694                           ;Config register CONFIG5L @ 0x300008
   695                           ;	Code Protection bit
   696                           ;	CP0 = OFF, Block 0 (000200-0007FFh) not code-protected
   697                           ;	Code Protection bit
   698                           ;	CP1 = OFF, Block 1 (000800-000FFFh) not code-protected
   699                           ;	Code Protection bit
   700                           ;	CP2 = OFF, Block 2 (001000-0017FFh) not code-protected
   701                           ;	Code Protection bit
   702                           ;	CP3 = OFF, Block 3 (001800-001FFFh) not code-protected
   703  300008                     	org	3145736
   704  300008  0F                 	db	15
   705                           
   706                           ;Config register CONFIG5H @ 0x300009
   707                           ;	Boot Block Code Protection bit
   708                           ;	CPB = OFF, Boot block (000000-0001FFh) is not code-protected
   709                           ;	Data EEPROM Code Protection bit
   710                           ;	CPD = OFF, Data EEPROM is not code-protected
   711  300009                     	org	3145737
   712  300009  C0                 	db	192
   713                           
   714                           ;Config register CONFIG6L @ 0x30000A
   715                           ;	Write Protection bit
   716                           ;	WRT0 = OFF, Block 0 (000200-0007FFh) not write-protected
   717                           ;	Write Protection bit
   718                           ;	WRT1 = OFF, Block 1 (000800-000FFFh) not write-protected
   719                           ;	Write Protection bit
   720                           ;	WRT2 = OFF, Block 2 (001000-0017FFh) not write-protected
   721                           ;	Write Protection bit
   722                           ;	WRT3 = OFF, Block 3 (001800-001FFFh) not write-protected
   723  30000A                     	org	3145738
   724  30000A  0F                 	db	15
   725                           
   726                           ;Config register CONFIG6H @ 0x30000B
   727                           ;	Configuration Register Write Protection bit
   728                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   729                           ;	Boot Block Write Protection bit
   730                           ;	WRTB = OFF, Boot block (000000-0001FFh) is not write-protected
   731                           ;	Data EEPROM Write Protection bit
   732                           ;	WRTD = OFF, Data EEPROM is not write-protected
   733  30000B                     	org	3145739
   734  30000B  E0                 	db	224
   735                           
   736                           ;Config register CONFIG7L @ 0x30000C
   737                           ;	Table Read Protection bit
   738                           ;	EBTR0 = OFF, Block 0 (000200-0007FFh) not protected from table reads executed in other
      +                           blocks
   739                           ;	Table Read Protection bit
   740                           ;	EBTR1 = OFF, Block 1 (000800-000FFFh) not protected from table reads executed in other
      +                           blocks
   741                           ;	Table Read Protection bit
   742                           ;	EBTR2 = OFF, Block 2 (001000-0017FFh) not protected from table reads executed in other
      +                           blocks
   743                           ;	Table Read Protection bit
   744                           ;	EBTR3 = OFF, Block 3 (001800-001FFFh) not protected from table reads executed in other
      +                           blocks
   745  30000C                     	org	3145740
   746  30000C  0F                 	db	15
   747                           
   748                           ;Config register CONFIG7H @ 0x30000D
   749                           ;	Boot Block Table Read Protection bit
   750                           ;	EBTRB = OFF, Boot block (000000-0001FFh) is not protected from table reads executed in
      +                           other blocks
   751  30000D                     	org	3145741
   752  30000D  40                 	db	64
   753                           tosu	equ	0xFFF
   754                           tosh	equ	0xFFE
   755                           tosl	equ	0xFFD
   756                           stkptr	equ	0xFFC
   757                           pclatu	equ	0xFFB
   758                           pclath	equ	0xFFA
   759                           pcl	equ	0xFF9
   760                           tblptru	equ	0xFF8
   761                           tblptrh	equ	0xFF7
   762                           tblptrl	equ	0xFF6
   763                           tablat	equ	0xFF5
   764                           prodh	equ	0xFF4
   765                           prodl	equ	0xFF3
   766                           indf0	equ	0xFEF
   767                           postinc0	equ	0xFEE
   768                           postdec0	equ	0xFED
   769                           preinc0	equ	0xFEC
   770                           plusw0	equ	0xFEB
   771                           fsr0h	equ	0xFEA
   772                           fsr0l	equ	0xFE9
   773                           wreg	equ	0xFE8
   774                           indf1	equ	0xFE7
   775                           postinc1	equ	0xFE6
   776                           postdec1	equ	0xFE5
   777                           preinc1	equ	0xFE4
   778                           plusw1	equ	0xFE3
   779                           fsr1h	equ	0xFE2
   780                           fsr1l	equ	0xFE1
   781                           bsr	equ	0xFE0
   782                           indf2	equ	0xFDF
   783                           postinc2	equ	0xFDE
   784                           postdec2	equ	0xFDD
   785                           preinc2	equ	0xFDC
   786                           plusw2	equ	0xFDB
   787                           fsr2h	equ	0xFDA
   788                           fsr2l	equ	0xFD9
   789                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126      4      12
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _my_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              2 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _my_isr                                               2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _my_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      19        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E      4       C       1        9.5%
BITBIGSFRhhllhh     20      0       0      12        0.0%
BITBIGSFRhhlhhh     19      0       0       9        0.0%
BITBIGSFRhhh         D      0       0       8        0.0%
BITBIGSFRhhlhll      B      0       0      11        0.0%
BITBIGSFRhhlll       8      0       0      13        0.0%
BITBIGSFRhlll        8      0       0      16        0.0%
BITBIGSFRhllh        6      0       0      15        0.0%
BITBIGSFRhhlhlh      4      0       0      10        0.0%
BITBIGSFRhlh         1      0       0      14        0.0%
BITBIGSFRl           1      0       0      17        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       C      18        0.0%
DATA                 0      0       C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed May 18 19:34:06 2022

                     l61 0184                       l63 018A                       l58 0190  
                    l761 014C                      l771 0166                      l763 014E  
                    l781 0174                      l773 0168                      l765 0150  
                    l783 0176                      l775 016A                      l767 015E  
                    l759 0140                      l849 01A4                      l785 0178  
                    l777 016C                      l769 0160                      l779 0172  
                    l789 0190                      u107 017A                      wreg 000FE8  
                   i2l73 00AE                     i2l74 006C                     i2l83 0138  
                   _flag 0006                     _main 0140                     btemp 000D  
                   start 013C             ___param_bank 000000                    ?_main 0007  
                  _T0CON 000FD5                    i2l801 002A                    i2l811 0080  
                  i2l803 0050                    i2l821 00B8                    i2l813 0096  
                  i2l805 0066                    i2l831 00F0                    i2l807 006E  
                  i2l815 00AE                    i2l823 00BA                    i2l841 0134  
                  i2l833 0100                    i2l825 00C8                    i2l817 00B2  
                  i2l809 0076                    i2l843 0136                    i2l835 0118  
                  i2l827 00CE                    i2l819 00B4                    i2l837 0128  
                  i2l829 00DA                    i2l839 0130                    i2l795 000A  
                  i2l797 000A                    i2l799 0018                    _TMR0H 000FD7  
                  _TMR0L 000FD6                    _PORTA 000F80                    _PORTC 000F82  
                  _STATE 0005                    _TRISC 000F94                    tablat 000FF5  
                  ttemp5 000E                    ttemp6 0011                    ttemp7 0015  
                  status 000FD8                    wtemp8 000E          __initialization 01CE  
           __end_of_main 01CE                   ??_main 0009            __activetblptr 000002  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   i2u1_40 0018  
                 i2u1_41 0014                   i2u2_40 002A                   i2u2_41 0026  
                 i2u3_40 0050                   i2u3_41 004C                   i2u4_40 0066  
                 i2u4_41 0062                   i2u5_40 0096                   i2u5_41 0092  
                 i2u6_40 00C8                   i2u6_41 00C4                   i2u7_40 00F0  
                 i2u7_41 00EC                   i2u8_40 0100                   i2u8_41 00FC  
                 i2u9_40 0128                   i2u9_41 0124                   _my_isr 0008  
                 isa$std 000001             __pdataCOMRAM 000B                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization 01F2            ___rparam_used 000001           __pcstackCOMRAM 0007  
                ?_my_isr 0007        _count_bloq_cycles 000B               _convert_ad 0003  
                __Hparam 0000                  __Lparam 0000                  __pcinit 01CE  
                __ramtop 0200                  __ptext0 0140     end_of_initialization 01F2  
          __Lmediumconst 0000                _TRISAbits 000F92           my_isr@time_low 0007  
          __pidataCOMRAM 0200           __end_of_my_isr 013C      start_initialization 01CE  
               ??_my_isr 0007              __pbssCOMRAM 0001                __pintcode 0008  
               _LATCbits 000F8B                 _IPR1bits 000F9F                 _PIE1bits 000F9D  
               _PIR1bits 000F9E                 _RCONbits 000FD0               _ADCON0bits 000FC2  
            _INTCON2bits 000FF1              _count_timer 0001                 __Hrparam 0000  
               __Lrparam 0000                 isa$xinst 000000                 int$flags 000D  
             _INTCONbits 000FF2                 intlevel2 0000  
